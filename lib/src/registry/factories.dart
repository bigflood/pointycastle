import "factory_config.dart";
import 'registry.dart';

import "../../asymmetric/pkcs1.dart";
import "../../asymmetric/rsa.dart";
import "../../block/aes_fast.dart";
import "../../block/modes/cbc.dart";
import "../../block/modes/cfb.dart";
import "../../block/modes/ctr.dart";
import "../../block/modes/ecb.dart";
import "../../block/modes/gctr.dart";
import "../../block/modes/ofb.dart";
import "../../block/modes/sic.dart";
import "../../digests/md2.dart";
import "../../digests/md4.dart";
import "../../digests/md5.dart";
import "../../digests/ripemd128.dart";
import "../../digests/ripemd160.dart";
import "../../digests/ripemd256.dart";
import "../../digests/ripemd320.dart";
import "../../digests/sha1.dart";
import "../../digests/sha224.dart";
import "../../digests/sha256.dart";
import "../../digests/sha3.dart";
import "../../digests/sha384.dart";
import "../../digests/sha512.dart";
import "../../digests/sha512t.dart";
import "../../digests/tiger.dart";
import "../../digests/whirlpool.dart";
import "../../ecc/curves/brainpoolp160r1.dart";
import "../../ecc/curves/brainpoolp160t1.dart";
import "../../ecc/curves/brainpoolp192r1.dart";
import "../../ecc/curves/brainpoolp192t1.dart";
import "../../ecc/curves/brainpoolp224r1.dart";
import "../../ecc/curves/brainpoolp224t1.dart";
import "../../ecc/curves/brainpoolp256r1.dart";
import "../../ecc/curves/brainpoolp256t1.dart";
import "../../ecc/curves/brainpoolp320r1.dart";
import "../../ecc/curves/brainpoolp320t1.dart";
import "../../ecc/curves/brainpoolp384r1.dart";
import "../../ecc/curves/brainpoolp384t1.dart";
import "../../ecc/curves/brainpoolp512r1.dart";
import "../../ecc/curves/brainpoolp512t1.dart";
import "../../ecc/curves/gostr3410_2001_cryptopro_a.dart";
import "../../ecc/curves/gostr3410_2001_cryptopro_b.dart";
import "../../ecc/curves/gostr3410_2001_cryptopro_c.dart";
import "../../ecc/curves/gostr3410_2001_cryptopro_xcha.dart";
import "../../ecc/curves/gostr3410_2001_cryptopro_xchb.dart";
import "../../ecc/curves/prime192v1.dart";
import "../../ecc/curves/prime192v2.dart";
import "../../ecc/curves/prime192v3.dart";
import "../../ecc/curves/prime239v1.dart";
import "../../ecc/curves/prime239v2.dart";
import "../../ecc/curves/prime239v3.dart";
import "../../ecc/curves/prime256v1.dart";
import "../../ecc/curves/secp112r1.dart";
import "../../ecc/curves/secp112r2.dart";
import "../../ecc/curves/secp128r1.dart";
import "../../ecc/curves/secp128r2.dart";
import "../../ecc/curves/secp160k1.dart";
import "../../ecc/curves/secp160r1.dart";
import "../../ecc/curves/secp160r2.dart";
import "../../ecc/curves/secp192k1.dart";
import "../../ecc/curves/secp192r1.dart";
import "../../ecc/curves/secp224k1.dart";
import "../../ecc/curves/secp224r1.dart";
import "../../ecc/curves/secp256k1.dart";
import "../../ecc/curves/secp256r1.dart";
import "../../ecc/curves/secp384r1.dart";
import "../../ecc/curves/secp521r1.dart";
import "../../key_derivators/pbkdf2.dart";
import "../../key_derivators/scrypt.dart";
import "../../key_generators/ec_key_generator.dart";
import "../../key_generators/rsa_key_generator.dart";
import "../../macs/hmac.dart";
import "../../padded_block_cipher/padded_block_cipher_impl.dart";
import "../../paddings/pkcs7.dart";
import "../../random/auto_seed_block_ctr_random.dart";
import "../../random/block_ctr_random.dart";
import "../../random/fortuna_random.dart";
import "../../signers/ecdsa_signer.dart";
import "../../signers/rsa_signer.dart";
import "../../stream/ctr.dart";
import "../../stream/salsa20.dart";
import "../../stream/sic.dart";


addFactoriesToRegistry() {
  var f = registry.addFactory;

  f(PKCS1Encoding.FACTORY_CONFIG, null);
  f(RSAEngine.FACTORY_CONFIG, () => new RSAEngine());
  f(AESFastEngine.FACTORY_CONFIG, () => new AESFastEngine());
  f(CBCBlockCipher.FACTORY_CONFIG, null);
  f(CFBBlockCipher.FACTORY_CONFIG, null);
  f(CTRBlockCipher.FACTORY_CONFIG, null);
  f(ECBBlockCipher.FACTORY_CONFIG, null);
  f(GCTRBlockCipher.FACTORY_CONFIG, null);
  f(OFBBlockCipher.FACTORY_CONFIG, null);
  f(SICBlockCipher.FACTORY_CONFIG, null);
  f(MD2Digest.FACTORY_CONFIG, () => new MD2Digest());
  f(MD4Digest.FACTORY_CONFIG, () => new MD4Digest());
  f(MD5Digest.FACTORY_CONFIG, () => new MD5Digest());
  f(RIPEMD128Digest.FACTORY_CONFIG, () => new RIPEMD128Digest());
  f(RIPEMD160Digest.FACTORY_CONFIG, () => new RIPEMD160Digest());
  f(RIPEMD256Digest.FACTORY_CONFIG, () => new RIPEMD256Digest());
  f(RIPEMD320Digest.FACTORY_CONFIG, () => new RIPEMD320Digest());
  f(SHA1Digest.FACTORY_CONFIG, () => new SHA1Digest());
  f(SHA224Digest.FACTORY_CONFIG, () => new SHA224Digest());
  f(SHA256Digest.FACTORY_CONFIG, () => new SHA256Digest());
  f(SHA3Digest.FACTORY_CONFIG, null);
  f(SHA384Digest.FACTORY_CONFIG, () => new SHA384Digest());
  f(SHA512Digest.FACTORY_CONFIG, () => new SHA512Digest());
  f(SHA512tDigest.FACTORY_CONFIG, null);
  f(TigerDigest.FACTORY_CONFIG, () => new TigerDigest());
  f(WhirlpoolDigest.FACTORY_CONFIG, () => new WhirlpoolDigest());
  f(ECCurve_brainpoolp160r1.FACTORY_CONFIG, () => new ECCurve_brainpoolp160r1());
  f(ECCurve_brainpoolp160t1.FACTORY_CONFIG, () => new ECCurve_brainpoolp160t1());
  f(ECCurve_brainpoolp192r1.FACTORY_CONFIG, () => new ECCurve_brainpoolp192r1());
  f(ECCurve_brainpoolp192t1.FACTORY_CONFIG, () => new ECCurve_brainpoolp192t1());
  f(ECCurve_brainpoolp224r1.FACTORY_CONFIG, () => new ECCurve_brainpoolp224r1());
  f(ECCurve_brainpoolp224t1.FACTORY_CONFIG, () => new ECCurve_brainpoolp224t1());
  f(ECCurve_brainpoolp256r1.FACTORY_CONFIG, () => new ECCurve_brainpoolp256r1());
  f(ECCurve_brainpoolp256t1.FACTORY_CONFIG, () => new ECCurve_brainpoolp256t1());
  f(ECCurve_brainpoolp320r1.FACTORY_CONFIG, () => new ECCurve_brainpoolp320r1());
  f(ECCurve_brainpoolp320t1.FACTORY_CONFIG, () => new ECCurve_brainpoolp320t1());
  f(ECCurve_brainpoolp384r1.FACTORY_CONFIG, () => new ECCurve_brainpoolp384r1());
  f(ECCurve_brainpoolp384t1.FACTORY_CONFIG, () => new ECCurve_brainpoolp384t1());
  f(ECCurve_brainpoolp512r1.FACTORY_CONFIG, () => new ECCurve_brainpoolp512r1());
  f(ECCurve_brainpoolp512t1.FACTORY_CONFIG, () => new ECCurve_brainpoolp512t1());
  f(ECCurve_gostr3410_2001_cryptopro_a.FACTORY_CONFIG, () => new ECCurve_gostr3410_2001_cryptopro_a());
  f(ECCurve_gostr3410_2001_cryptopro_b.FACTORY_CONFIG, () => new ECCurve_gostr3410_2001_cryptopro_b());
  f(ECCurve_gostr3410_2001_cryptopro_c.FACTORY_CONFIG, () => new ECCurve_gostr3410_2001_cryptopro_c());
  f(ECCurve_gostr3410_2001_cryptopro_xcha.FACTORY_CONFIG, () => new ECCurve_gostr3410_2001_cryptopro_xcha());
  f(ECCurve_gostr3410_2001_cryptopro_xchb.FACTORY_CONFIG, () => new ECCurve_gostr3410_2001_cryptopro_xchb());
  f(ECCurve_prime192v1.FACTORY_CONFIG, () => new ECCurve_prime192v1());
  f(ECCurve_prime192v2.FACTORY_CONFIG, () => new ECCurve_prime192v2());
  f(ECCurve_prime192v3.FACTORY_CONFIG, () => new ECCurve_prime192v3());
  f(ECCurve_prime239v1.FACTORY_CONFIG, () => new ECCurve_prime239v1());
  f(ECCurve_prime239v2.FACTORY_CONFIG, () => new ECCurve_prime239v2());
  f(ECCurve_prime239v3.FACTORY_CONFIG, () => new ECCurve_prime239v3());
  f(ECCurve_prime256v1.FACTORY_CONFIG, () => new ECCurve_prime256v1());
  f(ECCurve_secp112r1.FACTORY_CONFIG, () => new ECCurve_secp112r1());
  f(ECCurve_secp112r2.FACTORY_CONFIG, () => new ECCurve_secp112r2());
  f(ECCurve_secp128r1.FACTORY_CONFIG, () => new ECCurve_secp128r1());
  f(ECCurve_secp128r2.FACTORY_CONFIG, () => new ECCurve_secp128r2());
  f(ECCurve_secp160k1.FACTORY_CONFIG, () => new ECCurve_secp160k1());
  f(ECCurve_secp160r1.FACTORY_CONFIG, () => new ECCurve_secp160r1());
  f(ECCurve_secp160r2.FACTORY_CONFIG, () => new ECCurve_secp160r2());
  f(ECCurve_secp192k1.FACTORY_CONFIG, () => new ECCurve_secp192k1());
  f(ECCurve_secp192r1.FACTORY_CONFIG, () => new ECCurve_secp192r1());
  f(ECCurve_secp224k1.FACTORY_CONFIG, () => new ECCurve_secp224k1());
  f(ECCurve_secp224r1.FACTORY_CONFIG, () => new ECCurve_secp224r1());
  f(ECCurve_secp256k1.FACTORY_CONFIG, () => new ECCurve_secp256k1());
  f(ECCurve_secp256r1.FACTORY_CONFIG, () => new ECCurve_secp256r1());
  f(ECCurve_secp384r1.FACTORY_CONFIG, () => new ECCurve_secp384r1());
  f(ECCurve_secp521r1.FACTORY_CONFIG, () => new ECCurve_secp521r1());
  f(PBKDF2KeyDerivator.FACTORY_CONFIG, null);
  f(Scrypt.FACTORY_CONFIG, () => new Scrypt());
  f(ECKeyGenerator.FACTORY_CONFIG, () => new ECKeyGenerator());
  f(RSAKeyGenerator.FACTORY_CONFIG, () => new RSAKeyGenerator());
  f(HMac.FACTORY_CONFIG, null);
  f(PaddedBlockCipherImpl.FACTORY_CONFIG, null);
  f(PKCS7Padding.FACTORY_CONFIG, () => new PKCS7Padding());
  f(AutoSeedBlockCtrRandom.FACTORY_CONFIG, null);
  f(BlockCtrRandom.FACTORY_CONFIG, null);
  f(FortunaRandom.FACTORY_CONFIG, () => new FortunaRandom());
  f(ECDSASigner.FACTORY_CONFIG, null);
  f(RSASigner.FACTORY_CONFIG, null);
  f(CTRStreamCipher.FACTORY_CONFIG, null);
  f(Salsa20Engine.FACTORY_CONFIG, () => new Salsa20Engine());
  f(SICStreamCipher.FACTORY_CONFIG, null);

}
